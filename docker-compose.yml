version: '3.8'

x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U user --dbname=postgres'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  postgres_primary:
    <<: *postgres-common
    ports:
      - 5433:5432
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: password
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - ./01_init.sql:/docker-entrypoint-initdb.d/01_init.sql
      - ./02_init.sql:/docker-entrypoint-initdb.d/02_init.sql
    networks:
      - mynetwork

  postgres_replica:
    <<: *postgres-common
    ports:
      - 5434:5432
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - postgres_primary
    networks:
      - mynetwork

  pizza_data_inserter:
    build:
      context: ./app_insert1
    environment:
      DATABASE_HOST: postgres_primary
      DATABASE_USER: user
      DATABASE_PASSWORD: password
      DATABASE_NAME: postgres
    depends_on:
      - postgres_primary
    networks:
      - mynetwork

  vehicle_data_inserter:
    build:
      context: ./app_insert2
    environment:
      DATABASE_HOST: postgres_primary
      DATABASE_USER: user
      DATABASE_PASSWORD: password
      DATABASE_NAME: postgres
    depends_on:
      - postgres_primary
    networks:
      - mynetwork
    #original
  app_query:
    build:
      context: ./app_query1
    environment:
      DATABASE_HOST: postgres_primary
      DATABASE_USER: user
      DATABASE_PASSWORD: password
      DATABASE_NAME: postgres
    depends_on:
      - postgres_primary
    ports:
      - "5000:5000"
    networks:
      - mynetwork
    #replica
  app_query1:
    build:
      context: ./app_query2
    environment:
      DATABASE_HOST: postgres_primary
      DATABASE_USER: user
      DATABASE_PASSWORD: password
      DATABASE_NAME: postgres
    depends_on:
      - postgres_primary
    ports:
      - "5001:5001"
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge
